import std;

Player {
    var counter: num;

    var currentAimSpeed: num;
    var currentMoveSpeed: num;

    var a: bool;
    var b: bool;
    var c: bool;

    var g: array<num>;
}

struct array<T> {

    native static fn new(vararg elements: T);

    native static fn empty();

    native fn add(element: T);

    native fn removeByValue(element: T);

    native fn removeByIndex(index: num);

    native fn contains(element: T) -> bool;
}

rule "Init" OngoingEachPlayer() {
    cond player.g.contains(1);

    player.g = array.new(1, 2, 3, 4);
    player.g.add(1);

    player.currentAimSpeed = 100;
    player.currentMoveSpeed = 100;
}

rule "Reduce Aim Speed" OngoingEachPlayer() {
    cond player.isInAir;

    player.currentAimSpeed -= 10;
    player.currentMoveSpeed += 10;
    player.aimSpeed = player.currentAimSpeed;
    player.moveSpeed = player.currentMoveSpeed;
    player.sendSmallMessage("Aim slower");
    player.g = player.g;
}

rule "Hello World" OngoingEachPlayer() {
    cond (player.a && player.b) || player.c;

    player.counter += 1;
    player.counter -= 1;
    player.counter *= 1;
    player.counter /= 1;
    player.counter = 10;
    player.damageDealt = 150;
    player.sendSmallMessage("Hello World");
}